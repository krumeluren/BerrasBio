// <auto-generated />
using System;
using BerrasBio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BerrasBio.Migrations
{
    [DbContext(typeof(BerrasBioContext))]
    [Migration("20220420091813_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BerrasBio.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BerrasBio.Models.Bookable_Seats", b =>
                {
                    b.Property<int>("Bookable_SeatsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bookable_SeatsID"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.Property<int>("ShowID")
                        .HasColumnType("int");

                    b.Property<decimal>("Ticket_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Bookable_SeatsID");

                    b.HasIndex("BookingID");

                    b.HasIndex("SeatID");

                    b.HasIndex("ShowID");

                    b.ToTable("Bookable_Seats");
                });

            modelBuilder.Entity("BerrasBio.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ShowID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ShowID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BerrasBio.Models.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"), 1L, 1);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("BerrasBio.Models.Saloon", b =>
                {
                    b.Property<int>("SaloonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaloonID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaloonID");

                    b.ToTable("Saloon");
                });

            modelBuilder.Entity("BerrasBio.Models.Seat", b =>
                {
                    b.Property<int>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatID"), 1L, 1);

                    b.Property<int>("SaloonID")
                        .HasColumnType("int");

                    b.HasKey("SeatID");

                    b.HasIndex("SaloonID");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("BerrasBio.Models.Show", b =>
                {
                    b.Property<int>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowID"), 1L, 1);

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("SaloonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowID");

                    b.HasIndex("MovieID");

                    b.HasIndex("SaloonID");

                    b.ToTable("Show");
                });

            modelBuilder.Entity("BerrasBio.Models.Bookable_Seats", b =>
                {
                    b.HasOne("BerrasBio.Models.Booking", "Booking")
                        .WithMany("Booked_Seats")
                        .HasForeignKey("BookingID");

                    b.HasOne("BerrasBio.Models.Seat", "Seat")
                        .WithMany("This_Seat_Per_Show")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerrasBio.Models.Show", "Show")
                        .WithMany("Bookable_Seats")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Seat");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("BerrasBio.Models.Booking", b =>
                {
                    b.HasOne("BerrasBio.Models.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerrasBio.Models.Show", "Show")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("BerrasBio.Models.Seat", b =>
                {
                    b.HasOne("BerrasBio.Models.Saloon", "Saloon")
                        .WithMany("Seats")
                        .HasForeignKey("SaloonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Saloon");
                });

            modelBuilder.Entity("BerrasBio.Models.Show", b =>
                {
                    b.HasOne("BerrasBio.Models.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerrasBio.Models.Saloon", "Saloon")
                        .WithMany("Shows")
                        .HasForeignKey("SaloonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Saloon");
                });

            modelBuilder.Entity("BerrasBio.Models.Account", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BerrasBio.Models.Booking", b =>
                {
                    b.Navigation("Booked_Seats");
                });

            modelBuilder.Entity("BerrasBio.Models.Movie", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("BerrasBio.Models.Saloon", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("BerrasBio.Models.Seat", b =>
                {
                    b.Navigation("This_Seat_Per_Show");
                });

            modelBuilder.Entity("BerrasBio.Models.Show", b =>
                {
                    b.Navigation("Bookable_Seats");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
